include "DataRecoveryManager.tis";


class ColorsContainer : Element
{
    const colorElementPattern = "<div id='%s' class='colorButton'>"
                                "<div class='closeButton'>X</div>"
                                "</div>";

    function attached() {
        self.on("colorAdded", this.onColorAdded);
        self.on("selectedColorChanged", this.onSelectedColorChanged);
        self.on("colorRemoved", this.onColorRemoved);
        view.on("closing", this.onClosing);

        $(#colorsContainer).prepend(String.printf("<div id='%s' class='noColorButton selected'>No Color</div>", String.UID()));
        this.onDataRecovered(DataRecoveryManager.recovery());                   // should start and execute async!
    }

    function onClosing()
    {
        var children = $(#colorsContainer).selectAll(".colorButton");
        DataRecoveryManager.save(children);
    }

    function indexOf(id) {
        for (var (idx, button) in $(#colorsContainer)) {
            if (button.id == id) {
                return idx;
            }
        }
        return -1;
    }

    function onSelectedColorChanged(evt)
    {
        var index = indexOf(evt.data.id);
        if (index == selectedIndex || index < 0){
            return;
        }

        deselect();
        select(index, false);
    }

    function select(index, notify)
    {
        $(#colorsContainer)[index].attributes.addClass("selected");
        selectedIndex = index;
        if (notify)
            self.postEvent("selectedColorChanged", {id : $(#colorsContainer)[selectedIndex].id});
    }

    function deselect()
    {
        $(#colorsContainer)[selectedIndex].attributes.removeClass("selected");
        selectedIndex = -1;
    }

    function onColorAdded(evt) {
        var index = $(#colorsContainer).length - 1;
        insertElement(index, evt.data.color);
    }

    function insertElement(index, color)
    {
        $(#colorsContainer).insert(String.printf(colorElementPattern, String.UID()), index);
        $(#colorsContainer)[index].style#background-color=color;
    }

    function onColorRemoved(evt) {
        var index = indexOf(evt.data.id);
        if (index < 0) {
            return;
        }

        if (index < selectedIndex) {
            selectedIndex--;
        }
        else if (index == selectedIndex) {
            select(index - 1, true);
        }
        $(#colorsContainer)[index].remove();
    }

    function onDataRecovered(jsonData) 
    {
        for (var (idx, elem) in jsonData)
        {
            insertElement(idx + 1, elem.color);
            if (elem.selected)
            {
                deselect();
                select(idx + 1, true);
            }
        }
    }
    var selectedIndex = 0;
}